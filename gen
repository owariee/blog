#!/usr/bin/env bash

populate_posts() {
  FIRST="yes"
  while IFS= read -r LINE; do
    EPOCH=$(echo "$LINE" | awk -F, '{print $1}')
    TITLE=$(echo "$LINE" | awk -F, '{print $2}')
    LINK="\"posts/$(echo "$LINE" | awk -F, '{print $3}').html\""
  
    DATE=$(date -d @$EPOCH '+%Y %B')
    [ "$FIRST" = "yes" ] && DATE_OLD=$DATE && FIRST="no"
    if [ "$DATE" != "$DATE_OLD" ]; then
      CONTENT="$CONTENT<h1>$DATE_OLD</h1><ul>$MONTH_POSTS</ul>"
      MONTH_POSTS=""
      DATE_OLD=$DATE
    fi
  
    SHORT_DATE="<span>$(date -d @$EPOCH '+%Y %b %d') </span>"
    MONTH_POSTS="<li>$SHORT_DATE<a href=$LINK>$TITLE</a></li>$MONTH_POSTS"
  done <<< $(sort -k1 -n -t, <<< $(echo -e $TABLE) | tac)
  
  CONTENT="$CONTENT<h1>$DATE_OLD</h1><ul>$MONTH_POSTS</ul>"
  
  sed -e "/MONTH/e echo '$CONTENT'" -e "s/MONTH//" release/posts.html | tidy -i -o release/posts.html
}

post_html() {
  mkdir -p release/posts > /dev/null 2>&1
  for i in source/posts/*.txt; do
    local TIMESTAMP=$(stat -c'%Y' $i)
    local TITLE=$(head -n 1 $i)
    local NAME=${i:13:-4}
    TABLE="$TABLE\n$TIMESTAMP,$TITLE,$NAME"

    local CONTENT=$(tail -n +2 $i)
    local DATE=$(date -d @$TIMESTAMP '+%Y %B %d %I:%M %p')

    local POST_HTML="<h1 style=\"margin-bottom: 10px;\">$TITLE</h1><h3 style=\"margin-bottom: 10px; text-align: right;\">$DATE</h3><p>$CONTENT</p>"
    local POST_HTML="<div class=\"blog-content\" style=\"overflow: auto;\">$POST_HTML</div>"
    sed -e "/HERE/e echo '$POST_HTML'" -e "s/HERE//" source/page.html | tidy -i -o release/posts/$NAME.html
    sed -i "s/src=\"/src=\"\.\.\//g;s/href=\"/href=\"\.\.\//g" release/posts/$NAME.html
  done
}

page() {
  [ "$1" = "" ] && return 1
  sed -e "/HERE/e cat source/$1.html" -e "s/HERE//" source/page.html | tidy -i -o "release/$1.html"
  [ "$1" = "posts" ] && post_html && populate_posts
  return 0
}

add() {
  echo "Adding a new post to the shell blog system"
  read -p "Title: " TITLE
  local NAME=$(iconv -f utf8 -t ascii//TRANSLIT <<< $(echo $TITLE | sed 's/ /-/g') | tr -cd '[:alnum:]._-' | tr '[:upper:]' '[:lower:]')
  mkdir -p source/posts > /dev/null 2>&1
  echo $TITLE > source/posts/$NAME.txt
  nvim source/posts/$NAME.txt
}

del() {
  cd source/posts
  local DELETE=$(fzf)
  rm -rf $DELETE
  cd ../../
}

clean() {
  rm -rf release
}

clean_all() {
  clean
  rm -rf source/posts/*.txt
}

show() {
  chromium-freeworld "release/index.html"
}

styles() {
  cp -r source/styles.css release/.
}

images() {
  rm -rf release/images
  cp -r source/images release/.
}

all() {
  clean
  mkdir -p release
  images
  styles
  page index
  page posts
  page contact
  show
}

show_help() {
echo "
gen command tool 0.0.4 alpha @ 2020
developed by Jo√£o Gabriel Sabatini
distributed with Shell Blogging System under GPL-v3
  
gen add -- add post
gen del -- delete post
gen index -- generate index page
gen posts -- generate posts pages
gen contact -- generate contact page
gen styles -- update styles.css
gen images -- update images folder
gen clean -- remove release folder
gen clean-all -- remove release folder and posts
gen show -- open release in \$BROWSER
gen -- delete old release and generate a new one, then open in \$BROWSER
"
}

case "$1" in
  "add") add;;
  "del") del;;
  "index") page index;;
  "posts") page posts;;
  "contact") page contact;;
  "styles") styles;;
  "images") images;;
  "clean") clean;;
  "clean-all") clean_all;;
  "show") show;;
  "") all;;
  *) show_help;;
esac

